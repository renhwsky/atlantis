---
layout: post
title:  kv 数据库
date: 2020-05-06
categories: kv 数据库
tags: kv
excerpt: 数据库 存储 kv
---

概要
---
基于KV键值型数据库种类比较多，我们常见的有Rocksdb、Redis、memcached、Riak
适用的场景：储存用户信息，比如会话、配置文件、参数、购物车等等。这些信息一般都和ID(键)挂钩，这种情景下键值数据库是个很好的选择

缺点
---
由于单机内存总量的限制，内存KV有持久化到硬盘的需求，而基于硬盘的KV数据库多使用LSM Tree的方式在文件系统中实现（如RocksDB），在实际应用中会出现以下问题：

（1）极高的写放大
     由于WAL的机制，一份数据落盘即出现“双写”的效果，产生1倍写放大。WAL(Write-ahead logging)记录了数据持久写入DB之前的变更，是传统数据库保证数据安全性的必要动作。
     由于compaction机制的存在，新数据的写入会导致旧数据被反复合并，最终一份数据的写入实际会造成2倍以上的写入量。业界存储设备已经全面转向SSD，而SSD的寿命是有限的，
     类似RocksDB的KV数据库在SSD上会将SSD的预期寿命大幅缩短到原本的三分之一。
（2）缓存未命中时的读放大
     传统KV数据库将数据按冷热分层存储，在读取时分层检索。如果读取的数据没有在缓存中，那么至少需要一次硬盘读取操作，多则需要5次以上读盘操作才能取到数据。
（3）与设备性能不匹配的业务性能
     对于单个硬盘来讲，其总的IO能力是有限的，有限的IO能力被应用IO和KV数据库的compaction共同占用。由于compaction同时占用硬盘的读写带宽，大量的compaction
     操作使得上层业务可得的IO能力被大幅挤压。
（4）极低的空间使用率
     以上情形同时存在，整个存储设备一直处在compaction操作和compaction触发之前有大量失效数据未标记的情况下，此时如果有一定的业务性能要求，用户将不得不使用空间换性能，
     存储设备内的有效数据总量相对设备的实际容量比例必然过小。尽管很多业务已经从KV的使用中受益，但当前KV的不足限制了KV本该发挥的作用。
