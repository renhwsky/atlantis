MDS中的锁机制，实际上是使用分布式状态机来实现的一种简单锁，而非调用linux系统锁来实现，通过这些锁来实现对部分字段的读或者写进行控制。
在MDS中常见的有以下几种类型的锁：
（1）rdlocks，应用于
（2）wrlocks
（3）xlocks
（4）remote_wrlocks

	mds使用分布式状态机来实现锁机制，通过这种方式来控制mds指定字段的读操作、修改操作，虽然对单个Dentry都被single lock保护
  （控制这个命名空间的条目是否可读），但每个inode实际上还设置了5种类型的锁：每种类型的锁控制不同的fileds，比如：
（1）	link count
（2）	filename 归属和文件模式
（3）	文件大小和mtime
（4）	目录分片
另外这些锁的获取被严格排序通过如下配置<locktype,object>来避免死锁

每一个锁状态机被构造，目的是为了在mds中进行最小的化保护字段交互，多个fileds可以被单个锁保护，
这些锁的目的是保证副本一致性和可读性，但在权威条目更新时，会排除使用write锁（？）。另外一方面，
文件size和mtime被保护，通过锁的状态交互模式，来确定client的访问方式：单客户端访问、共享read、
混合read/write、共享write。还有一种为分散锁（scatter）,这种锁会在如下场景下生效（比如对单个
inode标记的utime，但是这个inode被设置为fragment，因此可能存在单个inode的多个fragment在不同的mds上），
设置了分散锁的业务在被允许更新之前，需要满足锁的状态以及包含了所有fragment的状态信息（从各mds上获取），
并且同时需要保证mtime是可读状态。

我们知道所有原始的更新操作，最终都转发到元数据对象中进行序列化和日志化操作。一个新的操作（比如link、unlink、
rename）触发在多个mds进行操作，比如在本地创建一个硬链接，但对应指向的inode则可能在另外的mds上，对应这种情况，
本端会触发一个slave更新请求来增加link的个数，需要注意slave的更新是分为2阶段提交：第一阶段为：一旦所有的mds已经持有
prepare日志事件，则协调所有的mds开始进行committing事务，第二阶段为：当slave收到committed的事件后，则关闭事务。
